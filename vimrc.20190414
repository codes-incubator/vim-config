" File: .vimrc
" " Author: Johnny P Jing <johnny@jpixy.com>
" "
" " How I configure Vim :P
" "
"

call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
" Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Group dependencies, vim-snippets depends on ultisnips
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading

" Plug list


" ----- Windows Management Plug  ----------------------------------------------
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'jistr/vim-nerdtree-tabs'
Plug 'xuyuanp/nerdtree-git-plugin'
Plug 'majutsushi/tagbar'
Plug 'vim-airline/vim-airline'
Plug 'terryma/vim-multiple-cursors'

" ----- Themes Plug  ----------------------------------------------
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline-themes'
Plug 'flazz/vim-colorschemes'
Plug 'powerline/powerline'

" ----- Git Plug  ----------------------------------------------
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" ----- DevOps Plug  ----------------------------------------------
Plug 'christoomey/vim-tmux-navigator'
Plug 'benmills/vimux'
Plug 'chase/vim-ansible-yaml'

" ----- Programming Plug  ----------------------------------------------
Plug 'scrooloose/syntastic'
Plug 'kien/ctrlp.vim'
" Plug 'valloric/youcompleteme'
Plug 'ervandew/supertab'
Plug 'w0rp/ale'
Plug 'easymotion/vim-easymotion'
Plug 'shougo/neocomplete.vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'elzr/vim-json'
Plug 'vim-scripts/functionlist.vim'
Plug 'majutsushi/tagbar'

" ----- Programming Language Support Plug  ------------------------------------
Plug 'fatih/vim-go'
Plug 'nsf/gocode'
Plug 'python-mode/python-mode', { 'branch': 'develop' }
Plug 'rust-lang/rust.vim'
Plug 'pangloss/vim-javascript'
Plug 'othree/html5.vim'

" ----- Accessible Tools Plug  ----------------------------------------------
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

" ----- Markdown Plug  ----------------------------------------------
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'

" ----- Other Plug  ----------------------------------------------
Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'


" Add plugins to &runtimepath
call plug#end()







" Plugin options

" ------ Plug NerdTree Options ---------------------------
autocmd vimenter * NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
nmap <F2> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" let NERDTreeWinPos="right"
let NERDTreeWinPos="left"
" let the course on the right editor zone by default
" Jump to the main window
autocmd VimEnter * wincmd p
" Close Nerdtree if no files specified
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let NERDTreeHighlightCursorline=1
let NERDTreeShowBookmarks=1

" ------ Plug 'majutsushi/tagbar' Options ---------------------------
nmap <F3> :TagbarToggle<CR>

" ------ Plug 'terryma/vim-multiple-cursors' Options ---------------------------
" Default mapping
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

" ------ Plug 'scrooloose/syntastic' Options ---------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" ------ Plug 'kien/ctrlp.vim' Options ---------------------------
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux

" ------ Plug 'easymotion/vim-easymotion' Options ---------------------------
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" ------ Plug Golang Options ---------------------------
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>e <Plug>(go-rename)

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_interfaces = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"

" ------ Plug Themes Options ---------------------------
syntax enable
" set background=light
" set background=dark
" colorscheme solarized
" let g:airline_theme='simple'










" --- General settings ---
" colorscheme solarized
colorscheme default
set clipboard=unnamedplus
set backspace=indent,eol,start
set ruler
set number
"  set showcmd
"  set incsearch
"  set hlsearch
syntax on
"  set mouse=a
filetype indent on
set smartindent
set tabstop=4  
set shiftwidth=4  
set expandtab  
set softtabstop=4
" set smartindent

" 关闭自动注释
set fo-=r 
" 关闭自动缩进（这个对C/C++代码好像无效）
set noautoindent
" 关闭C语言缩进 
set nocindent
set nosmartindent
set noautoindent

" set paste
" set nopaste
" set pastetoggle=<F3>

set foldmethod=indent

"  show the gird
set cursorline
set cursorcolumn

" disable the automatic comments new line
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
